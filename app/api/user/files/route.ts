import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { NextRequest, NextResponse } from 'next/server';

async function createSupabaseServerClient(request?: NextRequest) {
  if (request) {
    return createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          getAll() {
            return request.cookies.getAll()
          },
          setAll(cookiesToSet) {
            // Can't set cookies in API routes, but we can read them
          },
        },
      }
    )
  } else {
    const cookieStore = await cookies();
    return createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          getAll() {
            return cookieStore.getAll();
          },
          setAll(cookiesToSet) {
            try {
              cookiesToSet.forEach(({ name, value, options }) =>
                cookieStore.set(name, value, options)
              );
            } catch {
              // The `setAll` method was called from a Server Component.
            }
          },
        },
      }
    );
  }
}

// GET - Fetch user files (images and documents from message_images and message_documents)
export async function GET(req: NextRequest) {
  try {
    const supabase = await createSupabaseServerClient(req);
    
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      return NextResponse.json(
        { error: 'Authentication required' }, 
        { status: 401 }
      );
    }

    // Get uploaded images with conversation info
    const { data: images, error: imagesError } = await supabase
      .from('message_images')
      .select(`
        id,
        image_url,
        alt_text,
        created_at,
        messages!inner(
          id,
          conversations!inner(
            id,
            user_id,
            title
          )
        )
      `)
      .eq('messages.conversations.user_id', user.id)
      .order('created_at', { ascending: false });

    // Get uploaded documents with conversation info
    const { data: documents, error: documentsError } = await supabase
      .from('message_documents')
      .select(`
        id,
        document_url,
        name,
        file_type,
        size,
        created_at,
        messages!inner(
          id,
          conversations!inner(
            id,
            user_id,
            title
          )
        )
      `)
      .eq('messages.conversations.user_id', user.id)
      .order('created_at', { ascending: false });

    // Format file details for display
    const imageDetails = (images || []).map(img => ({
      id: img.id,
      file_name: img.alt_text || 'Generated Image',
      file_size: 0, // Images generated by AI don't have file sizes
      type: 'image' as const,
      created_at: img.created_at,
      url: img.image_url,
      conversation_title: img.messages?.[0]?.conversations?.[0]?.title || 'Unknown',
      conversation_id: img.messages?.[0]?.conversations?.[0]?.id
    }));

    const documentDetails = (documents || []).map(doc => ({
      id: doc.id,
      file_name: doc.name || 'Unknown Document',
      file_size: doc.size || 0,
      type: 'document' as const,
      created_at: doc.created_at,
      url: doc.document_url,
      file_type: doc.file_type,
      conversation_title: doc.messages?.[0]?.conversations?.[0]?.title || 'Unknown',
      conversation_id: doc.messages?.[0]?.conversations?.[0]?.id
    }));

    // Calculate stats
    const totalImages = imageDetails.length;
    const totalDocuments = documentDetails.length;
    const totalFiles = totalImages + totalDocuments;
    const totalSizeBytes = documentDetails.reduce((sum, file) => sum + (file.file_size || 0), 0);

    return NextResponse.json({ 
      files: {
        images: imageDetails,
        documents: documentDetails
      },
      stats: {
        total_files: totalFiles,
        total_images: totalImages,
        total_documents: totalDocuments,
        total_size_bytes: totalSizeBytes
      }
    });
    
  } catch (error) {
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
}